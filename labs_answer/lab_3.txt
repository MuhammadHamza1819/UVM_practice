////////////////////////////////////////// link for EDA PLAYGROUND//////////////////////////////////////////////////////////////////////////////////////////////////////

https://www.edaplayground.com/x/ifn6

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



`include "lab_3.sv"

`include "uvm_macros.svh"
import uvm_pkg::*;

module top;
  
  initial 
    begin
      run_test("test");
      end
endmodule 



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




class driver extends uvm_driver;
  
  `uvm_component_utils(driver)

  function new(string name = "driver", uvm_component parent = null);
    super.new(name, parent);
  endfunction

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    `uvm_info("DRIVER", "Build Phase Executed", UVM_NONE);
  endfunction

  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    `uvm_info("DRIVER", "Connect Phase Executed", UVM_NONE);
  endfunction

  task run_phase(uvm_phase phase);
    super.run_phase(phase);
    `uvm_info("DRIVER", "Driver Run Phase Executed!", UVM_NONE);
  endtask

endclass


class monitor extends uvm_monitor;

  `uvm_component_utils(monitor)

  function new(string name = "monitor", uvm_component parent = null);
    super.new(name, parent);
  endfunction

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    `uvm_info("MONITOR", "Build Phase Executed", UVM_NONE);
  endfunction

  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    `uvm_info("MONITOR", "Connect Phase Executed", UVM_NONE);
  endfunction

  task run_phase(uvm_phase phase);
    super.run_phase(phase);
    `uvm_info("MONITOR", "Monitor Run Phase Executed!", UVM_NONE);
  endtask

endclass


class environment extends uvm_env;
  
  `uvm_component_utils(environment)

  driver m_driver;
  monitor m_monitor;

  function new(string name = "environment", uvm_component parent = null);
    super.new(name, parent);
  endfunction

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    m_driver = driver::type_id::create("m_driver", this);
    m_monitor = monitor::type_id::create("m_monitor", this);
    `uvm_info("ENV", "Build Phase Executed", UVM_NONE);
  endfunction

  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    `uvm_info("ENV", "Connect Phase Executed", UVM_NONE);
  endfunction

  task run_phase(uvm_phase phase);
    super.run_phase(phase);
    `uvm_info("Environmnet", "enviro run phase executed!", UVM_NONE);
  endtask

endclass


class test extends uvm_test;
  
  `uvm_component_utils(test)
  
  function new(string name = "test", uvm_component parent = null);
    super.new(name, parent);
  endfunction
  
  environment env;
  
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    env = environment::type_id::create("env", this);
    `uvm_info("TEST", "test build phase executed ", UVM_LOW);
  endfunction
  
  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    `uvm_info("test", "test Connect phase execueted ", UVM_NONE);
    endfunction
  
  task run_phase(uvm_phase phase);
    super.run_phase(phase);
    `uvm_info("test", "test run phase executed!", UVM_NONE);

  endtask
  
endclass
